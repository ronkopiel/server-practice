"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "decodeUTF8", {
  enumerable: true,
  get: function get() {
    return _tweetnaclUtil.decodeUTF8;
  }
});
Object.defineProperty(exports, "encodeUTF8", {
  enumerable: true,
  get: function get() {
    return _tweetnaclUtil.encodeUTF8;
  }
});
Object.defineProperty(exports, "encodeBase64", {
  enumerable: true,
  get: function get() {
    return _tweetnaclUtil.encodeBase64;
  }
});
Object.defineProperty(exports, "decodeBase64", {
  enumerable: true,
  get: function get() {
    return _tweetnaclUtil.decodeBase64;
  }
});
exports.decrypted = exports.encrypted = exports.decrypt = exports.encrypt = exports.generateKey = exports.newRandomSalt = void 0;

var _tweetnacl = require("tweetnacl");

var _tweetnaclUtil = require("tweetnacl-util");

var _scryptAsync = _interopRequireDefault(require("scrypt-async"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var newNonce = function newNonce() {
  return (0, _tweetnacl.randomBytes)(_tweetnacl.secretbox.nonceLength);
};

var newRandomSalt = function newRandomSalt() {
  return (0, _tweetnaclUtil.encodeBase64)((0, _tweetnacl.randomBytes)(_tweetnacl.secretbox.nonceLength));
};

exports.newRandomSalt = newRandomSalt;
var latestScryptOptions = {
  N: 16384,
  r: 8,
  p: 1,
  dkLen: _tweetnacl.secretbox.keyLength,
  interruptStep: 0
};

var generateKey = function generateKey(password, salt) {
  var scryptOpts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : latestScryptOptions;
  return new Promise(function (resolve) {
    (0, _scryptAsync["default"])( //@ts-ignore
    password, salt, _objectSpread(_objectSpread({}, scryptOpts), {}, {
      encoding: "binary"
    }), function (derivedKey) {
      resolve(derivedKey);
    });
  });
};

exports.generateKey = generateKey;

var getUint8ArrayKeyFromOpts = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(opts) {
    var password, salt, key;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            password = opts.password, salt = opts.salt;
            key = opts.key;

            if (!(!key && password && salt)) {
              _context.next = 6;
              break;
            }

            _context.next = 5;
            return generateKey(password, salt, opts.scrypt);

          case 5:
            return _context.abrupt("return", _context.sent);

          case 6:
            if (key) {
              _context.next = 8;
              break;
            }

            throw new Error("A key, or a password/salt to generate a key from, is required!");

          case 8:
            if (typeof key === "string") {
              key = (0, _tweetnaclUtil.decodeUTF8)(key);
            }

            return _context.abrupt("return", key);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getUint8ArrayKeyFromOpts(_x) {
    return _ref.apply(this, arguments);
  };
}();

var encrypt = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(obj, secretOpts) {
    var nonce, keyUint8Array, messageUint8, box, fullMessage;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            nonce = secretOpts.nonce || newNonce();

            if (!(nonce.length !== _tweetnacl.secretbox.nonceLength)) {
              _context2.next = 3;
              break;
            }

            throw new Error("Invalid nonce, must be a Uint8Array of length ".concat(_tweetnacl.secretbox.nonceLength));

          case 3:
            _context2.next = 5;
            return getUint8ArrayKeyFromOpts(secretOpts);

          case 5:
            keyUint8Array = _context2.sent;
            messageUint8 = (0, _tweetnaclUtil.decodeUTF8)(JSON.stringify(obj));
            box = (0, _tweetnacl.secretbox)(messageUint8, nonce, keyUint8Array);
            fullMessage = new Uint8Array(nonce.length + box.length);
            fullMessage.set(nonce);
            fullMessage.set(box, nonce.length);
            return _context2.abrupt("return", (0, _tweetnaclUtil.encodeBase64)(fullMessage));

          case 12:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function encrypt(_x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}();

exports.encrypt = encrypt;

var decrypt = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(messageWithNonce, secretOpts) {
    var keyUint8Array, messageWithNonceAsUint8Array, nonce, message, decryptedData, base64DecryptedMessage;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return getUint8ArrayKeyFromOpts(secretOpts);

          case 2:
            keyUint8Array = _context3.sent;
            messageWithNonceAsUint8Array = (0, _tweetnaclUtil.decodeBase64)(messageWithNonce);
            nonce = messageWithNonceAsUint8Array.slice(0, _tweetnacl.secretbox.nonceLength);
            message = messageWithNonceAsUint8Array.slice(_tweetnacl.secretbox.nonceLength, messageWithNonce.length);
            decryptedData = _tweetnacl.secretbox.open(message, nonce, keyUint8Array);

            if (decryptedData) {
              _context3.next = 9;
              break;
            }

            throw new Error("Could not decrypt message");

          case 9:
            base64DecryptedMessage = (0, _tweetnaclUtil.encodeUTF8)(decryptedData);
            return _context3.abrupt("return", JSON.parse(base64DecryptedMessage));

          case 11:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function decrypt(_x4, _x5) {
    return _ref3.apply(this, arguments);
  };
}();

exports.decrypt = decrypt;

var encrypted = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(data, secretOpts) {
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (typeof secretOpts.salt !== "string") {
              secretOpts.salt = newRandomSalt();
            }

            if (!(secretOpts.type === "plaintext")) {
              _context4.next = 5;
              break;
            }

            return _context4.abrupt("return", {
              encryption: {
                type: "plaintext"
              },
              data: data
            });

          case 5:
            // default is using secretbox
            secretOpts.nonce = newNonce();
            _context4.t0 = {
              type: "secretbox",
              salt: secretOpts.salt,
              nonce: (0, _tweetnaclUtil.encodeBase64)(secretOpts.nonce),
              scrypt: _objectSpread({}, latestScryptOptions)
            };
            _context4.next = 9;
            return encrypt(data, secretOpts);

          case 9:
            _context4.t1 = _context4.sent;
            return _context4.abrupt("return", {
              encryption: _context4.t0,
              data: _context4.t1
            });

          case 11:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function encrypted(_x6, _x7) {
    return _ref4.apply(this, arguments);
  };
}();

exports.encrypted = encrypted;

var decrypted = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(encryptedData, secretOpts) {
    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (!(encryptedData.encryption.type === "secretbox")) {
              _context5.next = 4;
              break;
            }

            return _context5.abrupt("return", decrypt(encryptedData.data, {
              salt: encryptedData.encryption.salt,
              password: secretOpts.password,
              key: secretOpts.key,
              scrypt: encryptedData.encryption.scrypt
            }));

          case 4:
            return _context5.abrupt("return", encryptedData.data);

          case 5:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));

  return function decrypted(_x8, _x9) {
    return _ref5.apply(this, arguments);
  };
}();

exports.decrypted = decrypted;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,