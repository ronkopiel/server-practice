import { decodeUTF8, encodeUTF8, encodeBase64, decodeBase64 } from "tweetnacl-util";
import { Options as ScryptOptions } from "scrypt-async";
export { decodeUTF8, encodeUTF8, encodeBase64, decodeBase64 };
declare type Json = null | boolean | number | string | Json[] | {
    [prop: string]: Json;
};
declare type JsonCompatible<T> = {
    [P in keyof T]: T[P] extends Json ? T[P] : Pick<T, P> extends Required<Pick<T, P>> ? never : T[P] extends (() => any) | undefined ? never : JsonCompatible<T[P]>;
};
export interface SecretboxEncryptionOptions {
    salt: string;
    type: "secretbox";
    scrypt: ScryptOptions;
}
export interface PlaintextEncryptionOptions {
    type: "plaintext";
}
export declare type EncryptableData = JsonCompatible<any>;
export interface EncryptedDocument<EncryptionOptions, DataType> {
    encryption: EncryptionOptions;
    data: DataType;
}
export declare type SecretboxEncryptedDocument = EncryptedDocument<SecretboxEncryptionOptions, string>;
export declare type PlaintextDocument = EncryptedDocument<PlaintextEncryptionOptions, EncryptableData>;
export declare type MaybeEncryptedDocument = SecretboxEncryptedDocument | PlaintextDocument;
export declare const newRandomSalt: () => string;
export declare const generateKey: (password: string, salt: string, scryptOpts?: ScryptOptions) => Promise<Uint8Array>;
export interface SecretOptions {
    salt?: string | null;
    password?: string | null;
    key?: null | string | Uint8Array;
    nonce?: Uint8Array;
    scrypt?: ScryptOptions;
}
export interface EncryptedOptions extends SecretOptions {
    type?: "secretbox" | "plaintext";
}
export declare const encrypt: (obj: EncryptableData, secretOpts: SecretOptions) => Promise<string>;
export declare const decrypt: (messageWithNonce: string, secretOpts: SecretOptions) => Promise<EncryptableData>;
export declare const encrypted: (data: EncryptableData, secretOpts: EncryptedOptions) => Promise<MaybeEncryptedDocument>;
export declare const decrypted: (encryptedData: MaybeEncryptedDocument, secretOpts: SecretOptions) => Promise<EncryptableData>;
